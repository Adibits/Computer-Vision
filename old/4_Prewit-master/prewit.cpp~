#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

using namespace cv;

int main(int argc, char** argv)
{
  Mat src, dstx, dsty;
  Mat kernel1 = (Mat_<double>(3, 3) << 1, 0, -1, 1, 0, -1, 1, 0, -1);
  Mat kernel2 = (Mat_<double>(3, 3) << 1, 1, 1, 0, 0, 0, -1, -1, -1);
  Point anchor;
  double delta;
  int depth;
  char* window_name = "Prewitt Edge Detector";

  //printf("aaaaaaaaaa");
  //fflush(stdout);
  
  src = imread(argv[1], CV_LOAD_IMAGE_GRAYSCALE);
  Mat dst = src.clone();
  //printf("0000000000");
  //fflush(stdout);

  if (!src.data)
  { return -1; }

  /// Create Window
  namedWindow(window_name, CV_WINDOW_AUTOSIZE);
  
  /// Initiatlize arguments for the filter
  anchor = Point(-1, -1);
  delta = 0;
  depth = -1;
  
  //printf("1");
  //fflush(stdout);

  filter2D(src, dstx, depth, kernel1, anchor, delta, BORDER_DEFAULT);

  imshow( window_name, dsty );

  waitKey(0);

  filter2D(src, dsty, depth, kernel2, anchor, delta, BORDER_DEFAULT);

  imshow( window_name, dsty );

  waitKey(0);

  //printf("2");
  //fflush(stdout);
  const int channels = src.channels();
  switch(channels)
  {
  case 1:
     {

          //printf("case1");
	  //fflush(stdout);
          MatIterator_<uchar> itx, endx, ity, endy, it, end;
          for(itx = dstx.begin<uchar>(), endx = dstx.end<uchar>(),
              ity = dsty.begin<uchar>(), endy = dsty.end<uchar>(),
	      it = dst.begin<uchar>(), end = dst.end<uchar>(); itx != endx; ++itx, ++ity, ++it)
  	  {
              *it = (int)(sqrt((*itx)*(*itx) + (*ity)*(*ity)));
		//printf("%d", *it);
          }
          break;
     }
  case 3:
     {
          MatIterator_<Vec3b> itx, endx, ity, endy, it, end;
          for( itx = dstx.begin<Vec3b>(), endx = dstx.end<Vec3b>(),
	       ity = dsty.begin<Vec3b>(), endy = dsty.end<Vec3b>(),
	       it = dst.begin<Vec3b>(), end = dst.end<Vec3b>(); itx != endx; ++itx, ++ity, ++it)
          {
              (*it)[0] = (int)(sqrt((*itx)[0]*(*itx)[0] + (*ity)[0]*(*ity)[0]));
              (*it)[1] = (int)(sqrt((*itx)[1]*(*itx)[1] + (*ity)[1]*(*ity)[1]));
              (*it)[2] = (int)(sqrt((*itx)[2]*(*itx)[2] + (*ity)[2]*(*ity)[2]));
          }
      }
  }

  imshow( window_name, dst );

  waitKey(0);
  return 0;
}
